<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>damage = 10
range = 200
attacking = false
enemy = false
attackCd = 30
hp = 100;
attackingTarget = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// basic soldier

if(attacking &amp;&amp; !attackingTarget &amp;&amp; enemy){
    for (i = 0; i &lt; ds_list_size(global.gObjectArray); i+=1){
        //show_debug_message("loop made")
        if(distance_to_object(ds_list_find_value(global.gObjectArray, i)) &lt; range){
           show_debug_message("if made")     
           targetEnemy = ds_list_find_value(global.gObjectArray, i);

           attackingTarget = true;
           break;
        }
        if(image_index &lt;= 4){
                image_index+=1;
            }
            else{
                image_index = 0
            }
            
    }
    x-=2

}
else if(attacking &amp;&amp; !attackingTarget &amp;&amp; !enemy){
    image_xscale = -1
    for (i = 0; i &lt; ds_list_size(global.gEnemyObjectArray) ; i+=1){
        if(distance_to_object(ds_list_find_value(global.gEnemyObjectArray, i)) &lt; range){
           targetEnemy = ds_list_find_value(global.gEnemyObjectArray, i);
           attackingTarget = true;
           break;
    }
    if(image_index &lt;= 4){
        image_index+=1;
        }
    else{
        image_index = 0
        }
   
    }
    x+=2
}
else if(!attacking &amp;&amp; !attackingTarget &amp;&amp; enemy){
    
      for (i = 0; i &lt; array_length_1d(global.gObjectArray); i+=1){
        if(distance_to_object(ds_list_find_value(global.gObjectArray, i))){
           targetEnemy = ds_list_find_value(global.gObjectArray, i);
           attackingTarget = true;
           break;
        }              
}
}
else if(!attacking &amp;&amp; !attackingTarget &amp;&amp; !enemy){
      for (i = 0; i &lt; array_length_1d(global.gEnemyObjectArray); i+=1){
        if(distance_to_object(ds_list_find_value(global.gEnemyObjectArray, i))){
           targetEnemy = ds_list_find_value(global.gEnemyObjectArray, i);
           attackingTarget = true;
           break;
        }              
}
}
else if(attackingTarget){
    show_debug_message("attacking")
    if(attackCd == 0){
        projectile_fire(id, targetEnemy, spr_plasma);
        attackCd = 30;
    }
    else{
        attackCd-=1
    }      
}
if(hp &lt;= 0){
    instance_destroy()
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
